{"_id":"9fdWHOgOmwcldb1r","name":"Trabajos","type":"script","author":"2zMxDOZajeeKnx5Z","img":"icons/environment/people/commoner.webp","scope":"global","command":"/* - v1.0\nSource: brunocalado\nIcon: \nIcon2: icons/environment/people/commoner.webp\nTraducción: SirJBP\n*/\n\n(async () => {\n  const faction1 = await drawFromTable('Facciones');\n  const faction2 = await drawFromTable('Facciones');\n  const client = await drawFromTable('Cliente / Objetivo');\n  const target = await drawFromTable('Cliente / Objetivo');\n  const twist = await drawFromTable('Complicación');\n  const place = await drawFromTable('Localización de la actividad');\n  const task = await drawFromTable('Actividad');\n  const connection = await drawFromTable('Conexión');\n\n  let msg = `<h2>Trabajo</h2>`;\n  msg += `<ul><li>Facción 1: <b>${faction1}</b></li>`;\n  msg += `<li>Facción 2: <b>${faction2}</b></li>`;\n  msg += `<li>Cliente: <b>${client}</b></li>`;\n  msg += `<li>Objetivo: <b>${target}</b></li>`;\n  msg += `<li>Complicación: <b>${twist}</b></li>`;\n  msg += `<li>Localización de la actividad: <b>${place}</b></li>`;\n  msg += `<li>Actividad: <b>${task}</b></li>`;\n  msg += `<li>Conexión: <b>${connection}</b></li></ul>`;\n\n  let message=msg;\n\n  let folder;\n  if( game.folders.find( f => f.name === \"Ideas para Trabajos\") === undefined ) {\n    folder = await Folder.create( {\n      name: \"Ideas para Trabajos\",\n      type: \"JournalEntry\"\n    } );\n  } else {\n    folder = game.folders.find( f => f.name === \"Ideas para Trabajos\");\n  }\n\n  let data = {\n    name: `${task}`,\n    content: msg,\n    folder: folder\n  };\n  addEventListenerOnHtmlElement(\"#createJob\", 'click', (e) => {\n    createJob(data);    \n  });          \n  \n  message+=`<button style=\"background:#d10000;color:white\" id=\"createJob\">Guardar como una entrada de diario</button>`;\n  \n  let chatData = {\n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };  \n  ChatMessage.create(chatData, {});  \n\n})()\n\n/* Functions */\nasync function drawFromTable(tableName) {\n\n  let roll_compendiums;\n  let job_compendiums;\n  if( game.majorVersion > 7 ) {\n    roll_compendiums = game.packs.filter( p => p.documentName === 'RollTable');\n    job_compendiums = await roll_compendiums.filter( p => p.metadata.label === 'Tablas de Trabajos' )[0].getDocuments();\n  } else {\n    roll_compendiums = game.packs.filter( p => p.entity === 'RollTable');\n    job_compendiums = await roll_compendiums.filter( p => p.metadata.label === 'Tablas de Trabajos' )[0].getContent();\n  }\n  const table = await job_compendiums.filter( p=> p.name === tableName )[0];        \n  \n  if (!table) {\n    ui.notifications.warn(`Tabla ${tableName} no encontrada.`, {});\n    return;\n  }\n  const output = await table.roll();\n  const result = output.results[0].data.text;\n  return result;  \n}\n\nfunction addEventListenerOnHtmlElement(element, event, func){    \n    Hooks.once(\"renderChatMessage\", (chatItem, html) => { // Use Hook to add event to chat message html element\n        html[0].querySelector(element).addEventListener(event, func);        \n    });\n} // end addEventListenerOnHtmlElement\n\nasync function createJob(data) {\n  const instantAdventure = await JournalEntry.create(data);\n  await instantAdventure.sheet.render(true);    \n}","folder":null,"sort":0,"permission":{"default":0,"FIR7wPEGx1wVISuV":3,"2zMxDOZajeeKnx5Z":3},"flags":{"core":{"sourceId":"Macro.GVICe576rSbJ1REF"}}}
{"_id":"YRCEtPorMGjXmcfV","name":"Arreglar Clases","type":"script","author":"2zMxDOZajeeKnx5Z","img":"icons/svg/dice-target.svg","scope":"global","command":"const version = 'v1.2';\n\n/* Patch Actors\n\nTODO \n- \n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Forged%20in%20the%20Dark/scum-villainy_patch_actors.js\nicon: icons/tools/smithing/hammer-sledge-steel-grey.webp\ntraducción: SirJBP\n*/\n\nlet message=``;\nlet characters = game.actors.contents.filter(e => e.data.type === 'character');\nlet ships = game.actors.contents.filter(e => e.data.type === 'ship');\n\nif (characters==undefined && ships==undefined) {\n  ui.notifications.warn(\"No tienes personajes o naves!\");    \n} else {\n  \n  // VARS  \n  const effects = ['Mechanic class', 'Muscle class', 'Mystic class', 'Pilot class', 'Scoundrel class', 'Speaker class', 'Stitch class'];\n  const playbooks = ['Mechanic', 'Muscle', 'Mystic', 'Pilot', 'Scoundrel', 'Speaker', 'Stitch'];\n  \n  if (characters!=undefined) {\n    for(const character of characters) {\n      for (var i=0; i<=effects.length; i++) {     \n        const effect = character.effects.find(e => e.data.label === effects[i]);\n        if (effect!=undefined) {\n          let changes = duplicate(effect.data.changes);        \n          const playbookName = changes[0].value;\n          if ( playbooks.includes(playbookName) ) {\n            changes[0].value = translatePlaybook(playbookName);\n            message += `<h2>${character.name}</h2><p>${playbookName} ha sido cambiado por ${translatePlaybook(playbookName)}</p>`;\n            await effect.update({changes});          \n          } else {\n            message += `<h2>${character.name}</h2><p>Ningún cambio realizado. Todo Correcto.</p>`;\n          }          \n        }      \n      }\n    }\n  }\n  \n  // VARS\n  const effectsShip = ['Firedrake type', 'Stardancer type', 'Firedrake class', 'Stardancer class', 'Cerberus type', 'Cerberus class'];\n  const playbooksShip = ['Firedrake', 'Stardancer', 'Cerberus'];\n\n  if (ships!=undefined) {\n    for(const ship of ships) {\n      for (var i=0; i<=effectsShip.length; i++) {     \n        const effect = ship.effects.find(e => e.data.label === effectsShip[i]);\n        if (effect!=undefined) {\n          let changes = duplicate(effect.data.changes); // ALL EFFECTS\n          let changesBut = changes.filter(e => e.key !== 'data.ship_class'); // all effects but the one that will be changed.                 \n          let selectedEffect = changes.find(e => e.key === 'data.ship_class');\n          let selectedEffect2 = changes.find(e => e.key === 'data.designation');\n          let playbookName = selectedEffect.value;\n          //console.log(playbookName);\n          if ( playbooksShip.includes(playbookName) ) {\n            selectedEffect.value = translateShip(playbookName);\n            selectedEffect2.value = translateShipDesignation(playbookName);\n            changesBut.push(selectedEffect);\n            changesBut.push(selectedEffect2);\n            message += `<h2>${ship.name}</h2><p>${playbookName} ha sido cambiado por ${translateShip(playbookName)}</p>`;\n            await effect.update({changes: changesBut});                \n          } else {\n            message += `<h2>${ship.name}</h2><p>Ningún cambio realizado. Todo Correcto.</p>`;\n          }          \n        }      \n      }\n    }\n  }\n\n  // to chat\n  let chatData = {\n    user: game.user.id,\n    speaker: ChatMessage.getSpeaker(),\n    content: message\n  };\n\n  ChatMessage.create(chatData, {});\n}\n\nfunction translatePlaybook(playbook) {\n  if (playbook == 'Mechanic') {\n    return 'Mecánico';\n  } else if (playbook == 'Muscle') {\n    return 'Músculo';\n  } else if (playbook == 'Mystic') {\n    return 'Místico';\n  } else if (playbook == 'Pilot') {\n    return 'Piloto';\n  } else if (playbook == 'Scoundrel') {\n    return 'Canalla';\n  } else if (playbook == 'Speaker') {\n    return 'Orador';\n  } else if (playbook == 'Stitch') {\n    return 'Cirujano';\n  }\n}\n\nfunction translateShip(playbook) {\n  if (playbook == 'Firedrake') {\n    return 'Dragao';\n  } else if (playbook == 'Stardancer') {\n    return 'Stardancer';\n  } else {\n    return playbook;\n  }\n}\n\nfunction translateShipDesignation(playbook) {\n  if (playbook == 'Firedrake') {\n    return 'Corveta Convertida Clase Khanjigar';\n  } else if (playbook == 'Stardancer') {\n    return 'Carguero Clase Scarab serie CF-350';\n  } else if (playbook == 'Cerberus') {\n    return 'Nave Patrulla tipo Firebrand R-29';\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"tnmjg5BEY2dKOg7l":3,"2zMxDOZajeeKnx5Z":3},"flags":{"core":{"sourceId":"Macro.5pmTz4gvcKQMsLZW"}}}
{"_id":"f80TqrLepckQKD0V","name":"Cambiar barra de XP","type":"script","author":"2zMxDOZajeeKnx5Z","img":"icons/sundries/misc/lock-open-yellow.webp","scope":"global","command":"const version = '1.0';\n\n/*\nhttps://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Forged%20in%20the%20Dark/BladesintheDark-XpBar.js\nicon: icons/sundries/misc/lock-open-yellow.webp\ntraducción: SirJBP\n*/\n\nif (canvas.tokens.controlled[0]===undefined){\n  ui.notifications.warn(\"Necesitas seleccionar un token de personaje!\");    \n} else {\n  main();\n}\n\nasync function main() {\n  let attribute = [];\n  if(canvas.tokens.controlled[0].actor.type === 'character'){\n    attribute = Object.keys( game.system.model.Actor.character.attributes );\n    attribute.push(\"class\");\n  } else if(canvas.tokens.controlled[0].actor.type === 'ship'){\n    attribute = [\"crew\"];\n  }\n\n  let attributeList = ``;\n  attribute.map((t) => {\n    attributeList += `<option value=\"${t}\">${t}</option>`;\n  });\n  \n  new Dialog({\n    title: `Barra de XP - Mod. - v${version}`,\n    content: `\n    <h2>Tamaño de la barra de XP</h2>\n    <p>      \n      <input type=\"number\" min=1 max=12 id=\"xpBarSize\" value=\"6\"/>\n      <br>Mínimo 1, máximo 12.\n    </p><br>\n    <h2>Elige la barra de XP</h2>\n    <p>    \n      Insight = Perspicacia\n      <br>Prowess = Destreza\n      <br>Resolve = Voluntad\n      <br>Class = Clase\n      <br>Crew = Nave\n      <br><br><select id=\"attribute\" type=\"text\" style=\"width: 100px;\">\n        ${attributeList}\n      </select>\n    </p>    \n    `,\n    buttons: {\n      roll: {\n        label: \"Cambiar\",\n        callback: (html) => {\n          createImageFolder(html);\n        }\n      }, \n      cancel: {\n        label: \"Cancelar\"\n      }\n    }\n  }).render(true)\n}\n\nasync function createImageFolder(html) {\n  const xpBarSize = parseInt( html.find(\"#xpBarSize\")[0].value );  \n  let attribute = html.find(\"#attribute\")[0].value;  \n \n  let tokenD = canvas.tokens.controlled[0].actor;\n  \n  //attribute=''\n  if (attribute==='class') {\n    let updated = await Actor.updateDocuments([{_id: tokenD.id, \"data.experienceMax\": xpBarSize}]);\n  } else if (attribute==='crew') {\n    let updated = await Actor.updateDocuments([{_id: tokenD.id, \"data.crew_experienceMax\": xpBarSize}]);\n  } else {\n    let key = \"data.attributes.\" + attribute + \".expMax\"; \n    let updated = await Actor.updateDocuments([{_id: tokenD.id, [key]: xpBarSize}]);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"FIR7wPEGx1wVISuV":3,"2zMxDOZajeeKnx5Z":3},"flags":{"advanced-macros":{"runAsGM":false},"exportSource":{"world":"sav","system":"scum-and-villainy","coreVersion":"0.8.9","systemVersion":"1.9.4"},"core":{"sourceId":"Macro.R5S30v5UU19PIynf"}}}
{"$$deleted":true,"_id":"9fdWHOgOmwcldb1r"}
{"name":"Trabajos","type":"script","author":"2zMxDOZajeeKnx5Z","img":"icons/environment/people/commoner.webp","scope":"global","command":"/* - v1.1\nSource: brunocalado\nIcon: icons/environment/people/commoner.webp\nTranslation to spanish: SirJBP\n*/\n\n(async () => {\n  const faction1 = await drawFromTable('Facciones');\n  const faction2 = await drawFromTable('Facciones');\n  const client = await drawFromTable('Cliente / Objetivo');\n  const target = await drawFromTable('Cliente / Objetivo');\n  const twist = await drawFromTable('Complicación');\n  const place = await drawFromTable('Localización de la actividad');\n  const task = await drawFromTable('Actividad');\n  const connection = await drawFromTable('Conexión');\n\n  let msg = `<h2>Trabajo</h2>`;\n  msg += `<ul><li>Facción 1: <b>${faction1}</b></li>`;\n  msg += `<li>Facción 2: <b>${faction2}</b></li>`;\n  msg += `<li>Cliente: <b>${client}</b></li>`;\n  msg += `<li>Objetivo: <b>${target}</b></li>`;\n  msg += `<li>Complicación: <b>${twist}</b></li>`;\n  msg += `<li>Localización de la actividad: <b>${place}</b></li>`;\n  msg += `<li>Actividad: <b>${task}</b></li>`;\n  msg += `<li>Conexión: <b>${connection}</b></li></ul>`;\n\n  let message=msg;\n  let msgId = randomID();\n\n  let data = {\n    name: `${task}`,\n    content: msg\n  };          \n  \n  message+=`<button style=\"background:#d10000;color:white\" id=\"createJob-`\n  message+=msgId;\n  message+=`\">Guardar como entrada de diario</button>`;\n\n  let chatData = {\n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };  \n  ChatMessage.create(chatData, {});  \n  \n  addEventListenerOnHtmlElement(\"#createJob-\" + msgId, 'click', (e) => {\n    createJob(data);    \n  });\n})()\n\n/* Functions */\nasync function drawFromTable(tableName) {\n\n  let roll_compendiums;\n  let job_compendiums;\n  if( game.majorVersion > 7 ) {\n    roll_compendiums = game.packs.filter( p => p.documentName === 'RollTable');\n    job_compendiums = await roll_compendiums.filter( p => p.metadata.label === 'Tablas de Trabajos' )[0].getDocuments();\n  } else {\n    roll_compendiums = game.packs.filter( p => p.entity === 'RollTable');\n    job_compendiums = await roll_compendiums.filter( p => p.metadata.label === 'Tablas de Trabajos' )[0].getContent();\n  }\n  const table = await job_compendiums.filter( p=> p.name === tableName )[0];        \n  \n  if (!table) {\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\n    return;\n  }\n  const output = await table.roll();\n  const result = output.results[0].data.text;\n  return result;  \n}\n\nfunction addEventListenerOnHtmlElement(element, event, func){    \n  Hooks.on(\"renderChatMessage\", (chatItem, html, data) => {\n    if( html[0].querySelector(element) !== null ) {\n      html[0].querySelector(element).addEventListener(event, func);\n    }\n  });\n}\n\nasync function createJob(data) {\n\n  let folder;\n  if( game.folders.find( f => f.name === \"Ideas para Trabajos\") === undefined ) {\n    folder = await Folder.create( {\n      name: \"Ideas para Trabajos\",\n      type: \"JournalEntry\"\n    } );\n  } else {\n    folder = game.folders.find( f => f.name === \"Ideas para Trabajos\");\n  }\n  data.folder = folder;\n\n  const instantAdventure = await JournalEntry.create(data);\n  await instantAdventure.sheet.render(true);    \n}","folder":null,"sort":0,"permission":{"default":0,"2zMxDOZajeeKnx5Z":3},"flags":{"core":{"sourceId":"Macro.GVICe576rSbJ1REF"}},"_id":"qa0GXgAVBeC06wHt"}
